{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/matter-js/build/matter.js","webpack:///./node_modules/resurrect-js/resurrect.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/common/Game.js","webpack:///./src/common/Player.js","webpack:///./src/client/InputContext.js","webpack:///./src/client/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","e","f","require","u","a","Error","code","length","1","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","fillStyle","strokeStyle","min","max","settings","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","2","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","objects","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","toString","move","rebase","recursive","3","World","gravity","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pair","isActive","collision","collides","collided","filterA","filterB","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","world","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairId","pairKeys","keys","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","14","global","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","arguments","source","prop","constructor","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","isFunction","isPlainObject","isString","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","this","self","15","Engine","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","16","eventNames","callback","names","off","join","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","18","19","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","width","clientHeight","height","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","setTimeout","clearTimeout","runner","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","run","time","tick","stop","start","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","acos","sort","flag","upper","lower","pop","30","RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","Resurrect","option","prefix","cleanup","revive","refcode","origcode","buildcode","valuecode","GLOBAL","eval","escapeRegExp","string","message","NamespaceResolver","scope","getPrototype","getName","exec","resolver","Node","html","innerHTML","firstChild","is","isBoolean","isNumber","isDate","isRegExp","isObject","isAtom","isPrimitive","ref","deref","tag","proto","getPrototypeOf","builder","build","reduce","valueOf","decode","isTagged","visit","root","replacer","copy","handleAtom","atom","xmls","XMLSerializer","serializeToString","toISOString","isFinite","replacerWrapper","skip","RegExp","stringify","space","acceptKeys","JSON","fixPrototype","__proto__","resurrect","parse","g","Function","screenHeight","screenWidth","wallThickness","halfThickness","config","arena","createWall","w","h","WalkStates","freeze","WALK_RIGHT","WALK_LEFT","STANDING","jumpPower","state","isGrounded","canDoubleJump","walkStateStack","inputSequenceNumber","pendingInputs","input","dive","isPressed","jump","startWalkLeft","stopWalkLeft","startWalkRight","stopWalkRight","tickMetaData","currentWalkState","getCurrentWalkState","stats","PRESSED","RELEASED","necromancer","player2Keys","clientSidePrediction","processInput","player","game","ws","send","applyInput","score","right","bottomWall","Map","keyboard","keyStates","keyName","has","keyState","forEach","eventName","handleEvent","scoreboard","updateScoreboard","buffer","textAlign","addr","listen","WebSocket","entities","entity","addMapping","setupPlayerKeyboard","collider","collidee","callbackOnCollisionStart","lastProcessedInput","nextInput","unsimulatedTime","acc","rest","localBody","delete"],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","/**\n * # ResurrectJS\n * @version 1.0.3\n * @license Public Domain\n *\n * ResurrectJS preserves object behavior (prototypes) and reference\n * circularity with a special JSON encoding. Unlike regular JSON,\n * Date, RegExp, DOM objects, and `undefined` are also properly\n * preserved.\n *\n * ## Examples\n *\n * function Foo() {}\n * Foo.prototype.greet = function() { return \"hello\"; };\n *\n * // Behavior is preserved:\n * var necromancer = new Resurrect();\n * var json = necromancer.stringify(new Foo());\n * var foo = necromancer.resurrect(json);\n * foo.greet();  // => \"hello\"\n *\n * // References to the same object are preserved:\n * json = necromancer.stringify([foo, foo]);\n * var array = necromancer.resurrect(json);\n * array[0] === array[1];  // => true\n * array[1].greet();  // => \"hello\"\n *\n * // Dates are restored properly\n * json = necromancer.stringify(new Date());\n * var date = necromancer.resurrect(json);\n * Object.prototype.toString.call(date);  // => \"[object Date]\"\n *\n * ## Options\n *\n * Options are provided to the constructor as an object with these\n * properties:\n *\n *   prefix ('#'): A prefix string used for temporary properties added\n *     to objects during serialization and deserialization. It is\n *     important that you don't use any properties beginning with this\n *     string. This option must be consistent between both\n *     serialization and deserialization.\n *\n *   cleanup (false): Perform full property cleanup after both\n *     serialization and deserialization using the `delete`\n *     operator. This may cause performance penalties (breaking hidden\n *     classes in V8) on objects that ResurrectJS touches, so enable\n *     with care.\n *\n *   revive (true): Restore behavior (__proto__) to objects that have\n *     been resurrected. If this is set to false during serialization,\n *     resurrection information will not be encoded. You still get\n *     circularity and Date support.\n *\n *   resolver (Resurrect.NamespaceResolver(window)): Converts between\n *     a name and a prototype. Create a custom resolver if your\n *     constructors are not stored in global variables. The resolver\n *     has two methods: getName(object) and getPrototype(string).\n *\n * For example,\n *\n * var necromancer = new Resurrect({\n *     prefix: '__#',\n *     cleanup: true\n * });\n *\n * ## Caveats\n *\n *   * With the default resolver, all constructors must be named and\n *   stored in the global variable under that name. This is required\n *   so that the prototypes can be looked up and reconnected at\n *   resurrection time.\n *\n *   * The wrapper objects Boolean, String, and Number will be\n *   unwrapped. This means extra properties added to these objects\n *   will not be preserved.\n *\n *   * Functions cannot ever be serialized. Resurrect will throw an\n *   error if a function is found when traversing a data structure.\n *\n * @see http://nullprogram.com/blog/2013/03/28/\n */\n\n/**\n * @param {Object} [options] See options documentation.\n * @namespace\n * @constructor\n */\nfunction Resurrect(options) {\n    this.table = null;\n    this.prefix = '#';\n    this.cleanup = false;\n    this.revive = true;\n    for (var option in options) {\n        if (options.hasOwnProperty(option)) {\n            this[option] = options[option];\n        }\n    }\n    this.refcode = this.prefix + 'id';\n    this.origcode = this.prefix + 'original';\n    this.buildcode = this.prefix + '.';\n    this.valuecode = this.prefix + 'v';\n}\n\n/**\n * Portable access to the global object (window, global).\n * Uses indirect eval.\n * @constant\n */\nResurrect.GLOBAL = (0, eval)('this');\n\n/**\n * Escape special regular expression characters in a string.\n * @param {string} string\n * @returns {string} The string escaped for exact matches.\n * @see http://stackoverflow.com/a/6969486\n */\nResurrect.escapeRegExp = function (string) {\n    return string.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n};\n\n/* Helper Objects */\n\n/**\n * @param {string} [message]\n * @constructor\n */\nResurrect.prototype.Error = function ResurrectError(message) {\n    this.message = message || '';\n    this.stack = new Error().stack;\n};\nResurrect.prototype.Error.prototype = Object.create(Error.prototype);\nResurrect.prototype.Error.prototype.name = 'ResurrectError';\n\n/**\n * Resolves prototypes through the properties on an object and\n * constructor names.\n * @param {Object} scope\n * @constructor\n */\nResurrect.NamespaceResolver = function(scope) {\n    this.scope = scope;\n};\n\n/**\n * Gets the prototype of the given property name from an object. If\n * not found, it throws an error.\n * @param {string} name\n * @returns {Object}\n * @method\n */\nResurrect.NamespaceResolver.prototype.getPrototype = function(name) {\n    var constructor = this.scope[name];\n    if (constructor) {\n        return constructor.prototype;\n    } else {\n        throw new Resurrect.prototype.Error('Unknown constructor: ' + name);\n    }\n};\n\n/**\n * Get the prototype name for an object, to be fetched later with getPrototype.\n * @param {Object} object\n * @returns {?string} Null if the constructor is Object.\n * @method\n */\nResurrect.NamespaceResolver.prototype.getName = function(object) {\n    var constructor = object.constructor.name;\n    if (constructor == null) { // IE\n        var funcPattern = /^\\s*function\\s*([A-Za-z0-9_$]*)/;\n        constructor = funcPattern.exec(object.constructor)[1];\n    }\n\n    if (constructor === '') {\n        var msg = \"Can't serialize objects with anonymous constructors.\";\n        throw new Resurrect.prototype.Error(msg);\n    } else if (constructor === 'Object' || constructor === 'Array') {\n        return null;\n    } else {\n        return constructor;\n    }\n};\n\n/* Set the default resolver searches the global object. */\nResurrect.prototype.resolver =\n    new Resurrect.NamespaceResolver(Resurrect.GLOBAL);\n\n/**\n * Create a DOM node from HTML source; behaves like a constructor.\n * @param {string} html\n * @constructor\n */\nResurrect.Node = function(html) {\n    var div = document.createElement('div');\n    div.innerHTML = html;\n    return div.firstChild;\n};\n\n/* Type Tests */\n\n/**\n * @param {string} type\n * @returns {Function} A function that tests for type.\n */\nResurrect.is = function(type) {\n    var string = '[object ' + type + ']';\n    return function(object) {\n        return Object.prototype.toString.call(object) === string;\n    };\n};\n\nResurrect.isArray = Resurrect.is('Array');\nResurrect.isString = Resurrect.is('String');\nResurrect.isBoolean = Resurrect.is('Boolean');\nResurrect.isNumber = Resurrect.is('Number');\nResurrect.isFunction = Resurrect.is('Function');\nResurrect.isDate = Resurrect.is('Date');\nResurrect.isRegExp = Resurrect.is('RegExp');\nResurrect.isObject = Resurrect.is('Object');\n\nResurrect.isAtom = function(object) {\n    return !Resurrect.isObject(object) && !Resurrect.isArray(object);\n};\n\n/**\n * @param {*} object\n * @returns {boolean} True if object is a primitive or a primitive wrapper.\n */\nResurrect.isPrimitive = function(object) {\n    return object == null ||\n        Resurrect.isNumber(object) ||\n        Resurrect.isString(object) ||\n        Resurrect.isBoolean(object);\n};\n\n/* Methods */\n\n/**\n * Create a reference (encoding) to an object.\n * @param {(Object|undefined)} object\n * @returns {Object}\n * @method\n */\nResurrect.prototype.ref = function(object) {\n    var ref = {};\n    if (object === undefined) {\n        ref[this.prefix] = -1;\n    } else {\n        ref[this.prefix] = object[this.refcode];\n    }\n    return ref;\n};\n\n/**\n * Lookup an object in the table by reference object.\n * @param {Object} ref\n * @returns {(Object|undefined)}\n * @method\n */\nResurrect.prototype.deref = function(ref) {\n    return this.table[ref[this.prefix]];\n};\n\n/**\n * Put a temporary identifier on an object and store it in the table.\n * @param {Object} object\n * @returns {number} The unique identifier number.\n * @method\n */\nResurrect.prototype.tag = function(object) {\n    if (this.revive) {\n        var constructor = this.resolver.getName(object);\n        if (constructor) {\n            var proto = Object.getPrototypeOf(object);\n            if (this.resolver.getPrototype(constructor) !== proto) {\n                throw new this.Error('Constructor mismatch!');\n            } else {\n                object[this.prefix] = constructor;\n            }\n        }\n    }\n    object[this.refcode] = this.table.length;\n    this.table.push(object);\n    return object[this.refcode];\n};\n\n/**\n * Create a builder object (encoding) for serialization.\n * @param {string} name The name of the constructor.\n * @param value The value to pass to the constructor.\n * @returns {Object}\n * @method\n */\nResurrect.prototype.builder = function(name, value) {\n    var builder = {};\n    builder[this.buildcode] = name;\n    builder[this.valuecode] = value;\n    return builder;\n};\n\n/**\n * Build a value from a deserialized builder.\n * @param {Object} ref\n * @returns {Object}\n * @method\n * @see http://stackoverflow.com/a/14378462\n * @see http://nullprogram.com/blog/2013/03/24/\n */\nResurrect.prototype.build = function(ref) {\n    var type = ref[this.buildcode].split(/\\./).reduce(function(object, name) {\n        return object[name];\n    }, Resurrect.GLOBAL);\n    /* Brilliant hack by kybernetikos: */\n    var args = [null].concat(ref[this.valuecode]);\n    var factory = type.bind.apply(type, args);\n    var result = new factory();\n    if (Resurrect.isPrimitive(result)) {\n        return result.valueOf(); // unwrap\n    } else {\n        return result;\n    }\n};\n\n/**\n * Dereference or build an object or value from an encoding.\n * @param {Object} ref\n * @returns {(Object|undefined)}\n * @method\n */\nResurrect.prototype.decode = function(ref) {\n    if (this.prefix in ref) {\n        return this.deref(ref);\n    } else if (this.buildcode in ref) {\n        return this.build(ref);\n    } else {\n        throw new this.Error('Unknown encoding.');\n    }\n};\n\n/**\n * @param {Object} object\n * @returns {boolean} True if the provided object is tagged for serialization.\n * @method\n */\nResurrect.prototype.isTagged = function(object) {\n    return (this.refcode in object) && (object[this.refcode] != null);\n};\n\n/**\n * Visit root and all its ancestors, visiting atoms with f.\n * @param {*} root\n * @param {Function} f\n * @param {Function} replacer\n * @returns {*} A fresh copy of root to be serialized.\n * @method\n */\nResurrect.prototype.visit = function(root, f, replacer) {\n    if (Resurrect.isAtom(root)) {\n        return f(root);\n    } else if (!this.isTagged(root)) {\n        var copy = null;\n        if (Resurrect.isArray(root)) {\n            copy = [];\n            root[this.refcode] = this.tag(copy);\n            for (var i = 0; i < root.length; i++) {\n                copy.push(this.visit(root[i], f, replacer));\n            }\n        } else { /* Object */\n            copy = Object.create(Object.getPrototypeOf(root));\n            root[this.refcode] = this.tag(copy);\n            for (var key in root) {\n                var value = root[key];\n                if (root.hasOwnProperty(key)) {\n                    if (replacer && value !== undefined) {\n                        // Call replacer like JSON.stringify's replacer\n                        value = replacer.call(root, key, root[key]);\n                        if (value === undefined) {\n                            continue; // Omit from result\n                        }\n                    }\n                    copy[key] = this.visit(value, f, replacer);\n                }\n            }\n        }\n        copy[this.origcode] = root;\n        return this.ref(copy);\n    } else {\n        return this.ref(root);\n    }\n};\n\n/**\n * Manage special atom values, possibly returning an encoding.\n * @param {*} atom\n * @returns {*}\n * @method\n */\nResurrect.prototype.handleAtom = function(atom) {\n    var Node = Resurrect.GLOBAL.Node || function() {};\n    if (Resurrect.isFunction(atom)) {\n        throw new this.Error(\"Can't serialize functions.\");\n    } else if (atom instanceof Node) {\n        var xmls = new XMLSerializer();\n        return this.builder('Resurrect.Node', [xmls.serializeToString(atom)]);\n    } else if (Resurrect.isDate(atom)) {\n        return this.builder('Date', [atom.toISOString()]);\n    } else if (Resurrect.isRegExp(atom)) {\n        var args = atom.toString().match(/\\/(.+)\\/([gimy]*)/).slice(1);\n        return this.builder('RegExp', args);\n    } else if (atom === undefined) {\n        return this.ref(undefined);\n    } else if (Resurrect.isNumber(atom) && (isNaN(atom) || !isFinite(atom))) {\n        return this.builder('Number', [atom.toString()]);\n    } else {\n        return atom;\n    }\n};\n\n/**\n * Hides intrusive keys from a user-supplied replacer.\n * @param {Function} replacer function of two arguments (key, value)\n * @returns {Function} A function that skips the replacer for intrusive keys.\n * @method\n */\nResurrect.prototype.replacerWrapper = function(replacer) {\n    var skip = new RegExp('^' + Resurrect.escapeRegExp(this.prefix));\n    return function(k, v) {\n        if (skip.test(k)) {\n            return v;\n        } else {\n            return replacer(k, v);\n        }\n    };\n};\n\n/**\n * Serialize an arbitrary JavaScript object, carefully preserving it.\n * @param {*} object\n * @param {(Function|Array)} replacer\n * @param {string} space\n * @method\n */\nResurrect.prototype.stringify = function(object, replacer, space) {\n    if (Resurrect.isFunction(replacer)) {\n        replacer = this.replacerWrapper(replacer);\n    } else if (Resurrect.isArray(replacer)) {\n        var acceptKeys = replacer;\n        replacer = function(k, v) {\n            return acceptKeys.indexOf(k) >= 0 ? v : undefined;\n        };\n    }\n    if (Resurrect.isAtom(object)) {\n        return JSON.stringify(this.handleAtom(object), replacer, space);\n    } else {\n        this.table = [];\n        this.visit(object, this.handleAtom.bind(this), replacer);\n        for (var i = 0; i < this.table.length; i++) {\n            if (this.cleanup) {\n                delete this.table[i][this.origcode][this.refcode];\n            } else {\n                this.table[i][this.origcode][this.refcode] = null;\n            }\n            delete this.table[i][this.refcode];\n            delete this.table[i][this.origcode];\n        }\n        var table = this.table;\n        this.table = null;\n        return JSON.stringify(table, null, space);\n    }\n};\n\n/**\n * Restore the __proto__ of the given object to the proper value.\n * @param {Object} object\n * @returns {Object} Its argument, or a copy, with the prototype restored.\n * @method\n */\nResurrect.prototype.fixPrototype = function(object) {\n    if (this.prefix in object) {\n        var name = object[this.prefix];\n        var prototype = this.resolver.getPrototype(name);\n        if ('__proto__' in object) {\n            object.__proto__ = prototype;\n            if (this.cleanup) {\n                delete object[this.prefix];\n            }\n            return object;\n        } else { // IE\n            var copy = Object.create(prototype);\n            for (var key in object) {\n                if (object.hasOwnProperty(key) && key !== this.prefix) {\n                    copy[key] = object[key];\n                }\n            }\n            return copy;\n        }\n    } else {\n        return object;\n    }\n};\n\n/**\n * Deserialize an encoded object, restoring circularity and behavior.\n * @param {string} string\n * @returns {*} The decoded object or value.\n * @method\n */\nResurrect.prototype.resurrect = function(string) {\n    var result = null;\n    var data = JSON.parse(string);\n    if (Resurrect.isArray(data)) {\n        this.table = data;\n        /* Restore __proto__. */\n        if (this.revive) {\n            for (var i = 0; i < this.table.length; i++) {\n                this.table[i] = this.fixPrototype(this.table[i]);\n            }\n        }\n        /* Re-establish object references and construct atoms. */\n        for (i = 0; i < this.table.length; i++) {\n            var object = this.table[i];\n            for (var key in object) {\n                if (object.hasOwnProperty(key)) {\n                    if (!(Resurrect.isAtom(object[key]))) {\n                        object[key] = this.decode(object[key]);\n                    }\n                }\n            }\n        }\n        result = this.table[0];\n    } else if (Resurrect.isObject(data)) {\n        this.table = [];\n        result = this.decode(data);\n    } else {\n        result = data;\n    }\n    this.table = null;\n    return result;\n};\n\nmodule.exports = Resurrect;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import { Engine, World, Bodies, Events } from 'matter-js';\nimport config from './config.json';\n\nconst { screenHeight, screenWidth, wallThickness, halfThickness } = config.arena;\n\nfunction createWall(x, y, w, h, label) {\n    return Bodies.rectangle(x, y, w, h, { isStatic: true, id: label });\n}\n\nexport function callbackOnCollisionStart(engine, collider, collidee, callback) {\n    Events.on(engine, 'collisionStart', event => {\n        event.pairs.forEach(pair => {\n            if (\n                pair.bodyA === collider && pair.bodyB === collidee\n                || pair.bodyA === collidee && pair.bodyB === collider\n            ) {\n                callback();\n            }\n        });\n    });\n}\n\nexport default class Game {\n    constructor(engine) {\n\n        this.engine = engine;\n\n        this.score = {\n            left: 0,\n            right: 0,\n        }\n    }\n\n    /**\n     * run on server before starting game.\n     */\n    setupBodies() {\n\n        const bottomWall = createWall(screenWidth / 2, screenHeight + halfThickness, screenWidth, wallThickness, 'bottom-wall');\n        const topWall = createWall(screenWidth / 2, -halfThickness, screenWidth, wallThickness, 'top-wall');\n        const leftWall = createWall(-halfThickness, screenHeight / 2, wallThickness, screenHeight, 'left-wall');\n        const rightWall = createWall(screenWidth + halfThickness, screenHeight / 2, wallThickness, screenHeight, 'right-wall');\n\n        const ball = Bodies.circle(screenWidth / 2, 50, 30, { restitution: 0.9, id: 'ball' });\n\n        const bodies = [topWall, bottomWall, leftWall, rightWall, ball]\n        this.bodies = new Map(bodies.map(body => ([body.id, body])));\n        World.add(this.engine.world, bodies);\n    }\n\n    run() {\n        Engine.run(this.engine);\n    }\n}","import { Body, Bodies, Vertices, Common } from 'matter-js';\n\nconst WalkStates = Object.freeze({\n    WALK_RIGHT: Symbol('walk_right'),\n    WALK_LEFT: Symbol('walk_left'),\n    STANDING: Symbol('standing'),\n});\n\nexport default class Player {\n\n    static stats() {\n        return {\n            jumpPower: -10,\n            speed: 5,\n        }\n    }\n\n    constructor(body) {\n        this.body = body;\n\n        this.state = {\n            isGrounded: false,\n            canDoubleJump: false,\n            walkStateStack: [WalkStates.STANDING],\n        }\n\n        this.inputSequenceNumber = 0;\n        this.pendingInputs = [];\n    }\n\n    queueInput(input) {\n        this.pendingInputs.push(input);\n    }\n\n\n    applyInput(input) {\n        switch (input.type) {\n            case 'dive': this.dive(input.isPressed); break;\n            case 'jump': this.jump(input.isPressed); break;\n            case 'move-left': input.isPressed ? this.startWalkLeft() : this.stopWalkLeft(); break;\n            case 'move-right': input.isPressed ? this.startWalkRight() : this.stopWalkRight(); break;\n        }\n    }\n\n    update(tickMetaData) {\n        \n        if (typeof window !== 'undefined') {\n            // console.log(tickMetaData)\n            // console.log('Player update')\n        }\n        // Update player\n        let currentWalkState = this.getCurrentWalkState();\n\n        if (currentWalkState === WalkStates.STANDING) {\n            return;\n        }\n\n        const stats = Player.stats();\n\n        if (currentWalkState === WalkStates.WALK_LEFT) {\n            Body.setVelocity(this.body, { x: -stats.speed, y: this.body.velocity.y });\n        } else {\n            // Body.setVelocity(this.body, { x: this.stats.speed, y: this.body.velocity.y });\n            Body.setVelocity(this.body, { x: stats.speed, y: this.body.velocity.y })\n        }\n    }\n\n    startWalkRight() {\n        this.state.walkStateStack.push(WalkStates.WALK_RIGHT);\n    }\n\n    stopWalkRight() {\n        this.state.walkStateStack = this.state.walkStateStack.filter(state => state !== WalkStates.WALK_RIGHT);\n        Body.setVelocity(this.body, { x: 0, y: this.body.velocity.y })\n    }\n\n    startWalkLeft() {\n        this.state.walkStateStack.push(WalkStates.WALK_LEFT);\n    }\n\n    stopWalkLeft() {\n        this.state.walkStateStack = this.state.walkStateStack.filter(state => state !== WalkStates.WALK_LEFT);\n        Body.setVelocity(this.body, { x: 0, y: this.body.velocity.y })\n    }\n\n    dive(isPressed) {\n        if (isPressed) {\n            Body.setVelocity(this.body, { x: 0, y: 10 });\n        }\n    }\n\n    jump(isPressed) {\n        if (!isPressed) {\n            return;\n        }\n\n        const stats = Player.stats();\n        if (this.state.isGrounded) {\n            this.state.isGrounded = false;\n            Body.setVelocity(this.body, { x: this.body.velocity.x, y: stats.jumpPower });\n            this.state.canDoubleJump = true;\n        } else if (this.state.canDoubleJump) {\n            this.state.canDoubleJump = false;\n            Body.setVelocity(this.body, { x: this.body.velocity.x, y: stats.jumpPower });\n        }\n    }\n\n    getCurrentWalkState() {\n        return this.state.walkStateStack[this.state.walkStateStack.length - 1];\n    }\n}\n\n\nexport function createPlayerBody(x, y, radius, options = {}) {\n    let sides = 20;\n    let theta = Math.PI / sides;\n    let path = '';\n    let offset = theta * 20.5;\n\n    for (var i = 0; i < sides; i += 1) {\n        var angle = offset + (i * theta),\n            xx = Math.cos(angle) * radius,\n            yy = Math.sin(angle) * radius;\n\n        path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n    }\n\n    var polygon = {\n        label: 'Polygon Body',\n        position: { x, y },\n        vertices: Vertices.fromPath(path)\n    };\n\n    if (options.chamfer) {\n        var chamfer = options.chamfer;\n        polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius,\n            chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n        delete options.chamfer;\n    }\n\n    return Body.create(Common.extend({}, polygon, options));\n}","const PRESSED = true;\nconst RELEASED = false;\n\nexport default class InputContext {\n    constructor() {\n\n        this.keyStates = new Map();\n        this.callbacks = new Map();\n    }\n\n    addMapping(keyName, callback) {\n        this.callbacks.set(keyName, callback);\n    }\n\n    handleEvent(event) {\n        const { key, type } = event;\n        if (!this.callbacks.has(key)) {\n            return;\n        }\n        event.preventDefault();\n\n        const keyState = type === 'keydown' ? PRESSED : RELEASED;\n\n        if (this.keyStates.get(key) === keyState) {\n            return;\n        }\n\n        this.keyStates.set(key, keyState);\n\n        this.callbacks.get(key)(keyState);\n    }\n\n    listen(element) {\n        ['keyup', 'keydown'].forEach(eventName => {\n            element.addEventListener(eventName, event => {\n                this.handleEvent(event);\n            });\n        });\n    }\n}","import { Render, Events, Body, World, Engine, Runner } from 'matter-js';\nimport Game, { callbackOnCollisionStart } from '../common/Game';\n\nimport Player, { createPlayerBody } from '../common/Player';\nimport { keybinds, arena } from '../common/config.json';\nimport InputContext from './InputContext';\nimport Resurrect from 'resurrect-js';\n\nconst necromancer = new Resurrect();\nconst { player2Keys } = keybinds;\nconst { screenWidth, screenHeight } = arena;\n\nconst clientSidePrediction = true;\n\nfunction processInput(name, player, isPressed) {\n    const input = {\n        type: name,\n        isPressed,\n        inputSequenceNumber: ++player.inputSequenceNumber,\n        timestamp: game.engine.timing.timestamp,\n    }\n\n    ws.send(JSON.stringify({\n        type: 'input',\n        data: input,\n    }));\n\n    if (clientSidePrediction) {\n        player.applyInput(input);\n\n        player.pendingInputs.push(input);\n    }\n}\n\nfunction setupPlayerKeyboard(keyboard, player, keys) {\n    const { jump, right, left, dive } = keys;\n\n    keyboard.addMapping(jump, isPressed => {\n        processInput('jump', player, isPressed);\n    });\n\n    keyboard.addMapping(right, isPressed => {\n        processInput('move-right', player, isPressed)\n    });\n\n    keyboard.addMapping(left, isPressed => {\n        processInput('move-left', player, isPressed)\n    });\n\n    keyboard.addMapping(dive, isPressed => {\n        processInput('dive', player, isPressed);\n    });\n}\n\nconst engine = Engine.create({ isFixed: false });\nconst game = new Game(engine);\nconst keyboard = new InputContext();\n\nconst render = Render.create({\n    element: document.body,\n    engine: game.engine,\n    options: {\n        width: screenWidth,\n        height: screenHeight,\n        wireframes: false,\n        background: '#133377',\n    },\n});\nRender.run(render);\n\nlet scoreboard = updateScoreboard();\n\nEvents.on(render, 'afterRender', event => {\n    render.context.drawImage(\n        scoreboard,\n        (screenWidth / 2) - (scoreboard.width / 2),\n        (screenHeight / 8) - (scoreboard.height / 2)\n    );\n});\n\nEvents.on(game, 'update-score', event => {\n    game.score = event.score\n    scoreboard = updateScoreboard();\n});\n\nfunction updateScoreboard() {\n    const buffer = document.createElement('canvas');\n    buffer.width = 300;\n    buffer.height = 100;\n    const context = buffer.getContext('2d');\n    context.font = 'bold 40px Arial'\n    context.textAlign = 'center';\n    context.fillStyle = 'white';\n    context.fillText(`${game.score.left} - ${game.score.right}`, buffer.width / 2, buffer.height / 2);\n    return buffer;\n}\n\nconst runner = Runner.create({ isFixed: true });\nRunner.run(runner, engine);\n\nkeyboard.listen(window);\n\n\nlet addr;\n\nif (process.env.NODE_ENV === 'development') {\n    addr = 'ws://localhost:9000';\n} else {\n    addr = 'wss://morning-reef-06070.herokuapp.com';\n}\n\nconst ws = new WebSocket(addr);\n\nws.addEventListener('open', () => {\n    console.log('Connection established');\n});\n\n\nEvents.on(render, 'beforeRender', () => {\n    //do prediction\n})\n\nconst entities = new Map();\n\n\nws.addEventListener('message', event => {\n    const message = JSON.parse(event.data);\n\n    if (message.type === 'world-state') {\n\n        Events.trigger(ws, 'received-world-state', { message });\n\n\n    } else if (message.type === 'player-created') {\n        console.log('Initiating game...');\n        // console.log(message);\n\n        const player = new Player(necromancer.resurrect(message.entity));\n\n        setupPlayerKeyboard(keyboard, player, player2Keys);\n\n        entities.set(player.body.id, player.body);\n\n        message.state.map(body => necromancer.resurrect(body)).forEach(body => {\n            entities.set(body.id, body);\n\n            World.addBody(game.engine.world, body);\n        });\n\n        const bottomWall = entities.get('bottom-wall');\n\n        callbackOnCollisionStart(game.engine, player.body, bottomWall, () => {\n            if (!player.state.isGrounded) {\n                player.state.isGrounded = true;\n            }\n        });\n\n        Events.on(game.engine, 'beforeUpdate', player.update.bind(player));\n\n        World.addBody(game.engine.world, player.body);\n\n        Events.on(ws, 'received-world-state', ({ message }) => {\n            message.state\n                .map(body => necromancer.resurrect(body))\n                .forEach(body => {\n                    if (!entities.has(body.id)) {\n                        throw new Error('I have a received a body which is not in my list of entities');\n                    }\n\n                    Body.set(entities.get(body.id), body);\n\n                    if (body.id === player.body.id && clientSidePrediction) {\n\n                        let i = 0;\n                        while (i < player.pendingInputs.length) {\n\n                            const input = player.pendingInputs[i];\n\n                            if (input.inputSequenceNumber <= message.lastProcessedInput) {\n                                // Already processed\n                                player.pendingInputs.splice(i, 1);\n                            } else {\n                                // Not processed yet. apply it.\n                                player.applyInput(input);\n                                player.update();\n\n                                const nextInput = player.pendingInputs[i + 1];\n\n                                let unsimulatedTime = typeof nextInput === 'undefined'\n                                    ? game.engine.timing.timestamp - input.timestamp\n                                    : nextInput.timestamp - input.timestamp;\n\n                                let acc = 0;\n                                while(unsimulatedTime >= acc+ (1000 / 60) ) {\n                                    Body.update(player.body, (1000 / 60), 1, 1);\n                                    acc += (1000 / 60);\n                                }\n                                let rest = unsimulatedTime - acc;\n                                console.log(rest);\n                                Body.update(player.body, rest, 1, 1);\n                                // simulateTime(player.body, game.engine.timing.delta, unsimulatedTime);\n                                // Engine.update(game.engine, unsimulatedTime, 1);\n                                // simulateTime(player.body, timestep, unsimulatedTime);\n                                i++;\n                            }\n                        }\n\n                    }\n                });\n\n            Events.trigger(game, 'update-score', { score: message.score });\n        });\n\n        console.log('Game initiated.')\n\n    } else if (message.type === 'other-connected') {\n        const body = necromancer.resurrect(message.entity);\n        entities.set(body.id, body);\n        World.addBody(game.engine.world, body);\n    } else if (message.type === 'other-disconnected') {\n        const body = necromancer.resurrect(message.entity);\n        const localBody = entities.get(body.id);\n        entities.delete(localBody.id);\n        World.remove(game.engine.world, localBody);\n    }\n});\n\n"],"sourceRoot":""}